.. _Workspace:

Workspace
=========

.. note::

    (incomplete) Important: This section assume the project name is 'example' while actual projects will likely use different names.

By default, phyddle saves work from its pipeline steps to the ``workspace`` directory. Briefly, the ``workspace`` directory itself contains six subdirectories corresponding to the five pipeline steps, plus one directory for logs:

* ``simulate`` contains raw data generated by simulation
* ``format`` contains data formatted into tensors for training networks
* ``train`` contains trained networks and diagnostics
* ``estimate`` contains new test datasets their estimateions
* ``plot`` contains figures of training and validation procedures
* ``log`` contains runtime logs for a phyddle project


.. _Example_Project:

Example project
---------------

For example, the workspace for the ``example`` project bundled with phyddle was generated using the command ``./scripts/run_phyddle.sh --cfg config --proj example --end_idx 25000``. This corresponds to a 3-region equal-rates GeoSSE model. All directories are populated, except ``./workspace/simulate/example`` contains only 20 original examples.

This section provides an overview of the main workspace directories used to store work across projects and pipeline steps. A standard configuration for a project named ``example`` would store pipeline work into these directories:

.. code-block:: shell

	workspace/simulate/example       # output of Simulate step
	workspace/format/example         # output of Format step
	workspace/train/example          # output of Train step
	workspace/estimate/example       # output of Estimate step
	workspace/plot/example           # output of Plot step
	workspace/log/example            # analysis logs

Next, we give an overview of the standard files and formats corresponding to each pipeline directory.


``simulate``
------------
.. code-block:: shell

    workspace/simulate/example/sim.0.beast.log
    workspace/simulate/example/sim.0.dat.nex
    workspace/simulate/example/sim.0.json
    workspace/simulate/example/sim.0.param_col.csv
    workspace/simulate/example/sim.0.param_row.csv
    workspace/simulate/example/sim.0.phy.nex
    workspace/simulate/example/sim.0.tre
    workspace/simulate/example/sim.0.xml

``format``
----------
(incomplete)

``train``
---------

Training a network creates the following files in the ``workspace/train/my_project`` directory:

.. code-block:: shell

    train_prefix.cpi_adjustments.csv
    train_prefix.hdf5
    train_prefix.test_labels.csv
    train_prefix.test_pred.csv
    train_prefix.test_pred_nocalib.csv
    train_prefix.train_history.json
    train_prefix.train_label_norm.csv
    train_prefix.train_labels.csv
    train_prefix.train_pred.csv
    train_prefix.train_pred_nocalib.csv
    train_prefix.train_summ_stat_norm.csv

where ``train_prefix`` describes the training settings for the network. For
example, the network prefix ``sim_batchsize128_numepoch20_nt500`` indicated a
network trained with a batch size of 128 samples for 20 epochs on the tree
width size-category of max. 500 taxa.

Descriptions of the files are as follows, with ``train_prefix`` omitted for brevity:
* ``network.hdf5``: a saved copy of the trained neural network that can be loaded by Tensorflow
* ``train_label_norm.csv`` and ``train_aux_data_norm.csv``: the location-scale values from the training dataset to (de)normalize the labels and auxiliary data from any dataset
* ``train_labels.csv`` and ``test_labels.csv``: the true values of labels for the training and test datasets, where columns correspond to estimated labels (e.g. model parameters)
* ``train_est.csv`` and ``test_est.csv``: the trained network estimates of labels for the training and test datasets, with calibrated prediction intervals, where columns correspond to point estimates and estimates for lower CPI and upper CPI bounds for each named label (e.g. model parameter)
* ``train_pred_nocalib.csv`` and ``test_pred_nocalib.csv``: the trained network estimates of labels for the training and test datasets, with uncalibrated prediction intervals
* ``train_history.json``: the metrics across training epochs monitored during network training
* ``cpi_adjustments.csv``: calibrated prediction interval adjustments, where columns correspond to parameters, the first row contains lower bound adjustments, and the second row contains upper bound adjustments


``estimate``
------------

The ``estimate`` directory is intended to store input *and* output for the
:ref:`Estimate` step. 

.. code-block:: shell

    new.1.tre
    new.1.dat.nex

Running the :ref:`Estimate` step would yield these files:

.. code-block:: shell

    new.1.tre
    new.1.dat.nex
    new.1.cdvs.csv
    new.1.sim_batchsize128_numepoch20_nt500.pred_labels.csv
    new.1.summ_stat.csv
    new.1.extant.tre                                        
    new.1.info.csv

Files will 

.. code-block:: shell

   $ cat new.1.sim_batchsize128_numepoch20_nt500.pred_labels.csv
   w_0_value,w_0_lower,w_0_upper,e_0_value,e_0_lower,e_0_upper,d_0_1_value,d_0_1_lower,d_0_1_upper,b_0_1_value,b_0_1_lower,b_0_1_upper
   0.2867125345651129,0.1937433853918723,0.45733220552078013,0.02445545359384659,0.002880695707341881,0.10404499205878459,0.4502031713887769,0.1966340488593367,0.5147956690178682,0.06199703190510973,0.0015074254823161301,0.27544015163806645

Columns are grouped first by label (e.g. parameter) and then statistic (e.g. value, lower-bound, upper-bound).


``plot``
--------

.. code-block:: shell

    train_batchsize128_numepoch20_nt500.density_aux.pdf
    train_batchsize128_numepoch20_nt500.density_label.pdf
    train_batchsize128_numepoch20_nt500.est_CPI.pdf
    train_batchsize128_numepoch20_nt500.history.pdf
    train_batchsize128_numepoch20_nt500.history_param_lower.pdf
    train_batchsize128_numepoch20_nt500.history_param_upper.pdf
    train_batchsize128_numepoch20_nt500.history_param_value.pdf
    train_batchsize128_numepoch20_nt500.network_architecture.pdf
    train_batchsize128_numepoch20_nt500.pca_aux.pdf
    train_batchsize128_numepoch20_nt500.summary.pdf
    train_batchsize128_numepoch20_nt500.test_b_0_1.pdf
    train_batchsize128_numepoch20_nt500.test_d_0_1.pdf
    train_batchsize128_numepoch20_nt500.test_e_0.pdf
    train_batchsize128_numepoch20_nt500.test_w_0.pdf
    train_batchsize128_numepoch20_nt500.train_b_0_1.pdf
    train_batchsize128_numepoch20_nt500.train_d_0_1.pdf
    train_batchsize128_numepoch20_nt500.train_e_0.pdf
    train_batchsize128_numepoch20_nt500.train_w_0.pdf